KM算法干啥的，二部图
    甲   乙   丙   丁
A   10  5   3   4
B   6   2   7   3
C   0   0   5   4
D   6   2   3   8
让A-D和甲-丁两两配对，如何达到价值最大化。

1、如果字母和文字数量不一样，把少的那部分补零
2、A甲 10 A乙10，B甲4 B乙9，AB有预期10和9，10+9这样甲乙都不调整预期
    A甲6，A乙10，B甲2 B乙8，A预期10，B预期8，AB两个人的下降预期为4和6

 （10)A-----6-----甲
       10       。
           。
      2          。
 （8)B-----8-------乙
    KM算法核心：【粗略说一下】选择下降预期最小的，然后把AB预期减少4，A预期6，B预期4。然后此时甲选择10对应的乙，然后甲和乙也增加一个预期值，把被选的预期增加为
    预期差值，甲预期值=0，乙预期值=4。
情景1：如果不降低甲乙任何一个人的预期值，分配是完成不了的
    （1）A预期=10，B预期=8，甲的预期=0，乙的预期=0，A不降预期可以配成乙
    (2)此时乙就不行了，只有2，不能满足预期，可以选甲，但是要降低预期。
    (3)但是如果此时B选择了乙，但是此时乙的主是A，让A重选，A选择甲，A就要降低预期。
    所以这个图现在的情况是在不降低甲乙预期的情况下分配完所有人是不可能实现的。
情景2：如何在降低预期的情况下，完成分配
    此时遍历到A还是先把乙分配给甲
    （1）甲的预期值降低幅度=10-6=4，乙预期降低幅度值8-2=6 ，所以最小降低幅度是4
    （2）因为在情景1中发现不降低预期是无法完成分配的所以，把每个人的预期值降低最小幅度4 A预期值变为6 【无法选全把主动的减去幅度值】
    6)A-----6-----甲(0)
       10       。
            。
       2          。
     4)B-----8----乙(4)
     (3)此时甲拥有乙，乙把预期值+4,甲没有配不加【被选中的增加降低预期值】
    （4）这时候B+乙=礼金8，B拿走乙，让甲重选，甲期望值是6，正好有6的边对应目标的期望值还是0，选上。结束
3、KM算法的解释
A          甲
B          乙
C          丙
-------------
D          丁
ABCD(20，16，15，12）ABC分配了乙丙丁，D无法选择甲,让ABCD减3，让乙丙丁+3
本质：（1）从这个分配上看最后的价值就是6+4+4+0=14，最后的最大值是字母和文字的预期值
   10)A-----6-----甲
       10       。
           。
      2          。
   8)B-----8-------乙
  -----------------------------------------------------------------
  ----------------------------------------------------------------
  6)A-----6-----甲(0)
      10       。
          。
     2          。
  4)B-----8----乙(4)
（2）从ABCD和甲乙丙丁那个结果上看ABC和乙丙丁分别都-3和+3,把原来那个三组的整体选择预期值维持住！！！让没法选择的那个人减低预期，能够去选！！！
（3）再看一下，AB甲乙这组，A初始预期是10+0，B的初始预期是8+0，A的预期变成6，B的预期变成4，乙变成4，最好的那条边A到乙=10维持住了维持住了！！A到乙还是10
    降低预期的好处：巩固之前选择好的结果；把不能选的主可以选上了；
（4）A降低了预期原来10那个边不能选了，直接选择甲，乙那个可以选了选择4.【王子可以选择的边不能超过自己当前的预期】
4、KM算法的降低预期计算
如果某个主要计算自己的降低预期值，他找的每个下架的下降预期值都要算选出最小值，然后找所有人的最小减少预期，然后调整主(-)和从(+)的预期值
5、路径优化
如果最后往上递推重新抢夺的过程
A ---  甲
B ---  乙
C ---  丙
----------------
D      丁
ABCD--甲乙丙，D想抢丙，D->丙(c)，c->乙(B),B->甲(A),A再找，D发现自己没有可以选择的，（1）就遍历尝试甲乙丙筛选过程【递归】，这是不需要优化的
（2）【注意】但是D在走完甲乙丙筛选过程的某一条或者某一个过程后，如果D在选择丙的时候走不通（假设是因为C抢不到乙），那么D就不用去考虑乙了，这里优化
（3）过程 ：a.D去找丙，D->丙(C),假设此时C不要丙了，C->乙(B)【表示C去找乙，乙的背后是B】，然后此时B(此时B会有N多种可能)再去找甲，B->甲(A)。
如果此时，发现C->乙(B)这条路不行，那么也别让D去碰乙了，因为后续递归的过程肯定都是失败的，【在这里完成剪枝！！！！！】
结论：某个支路碰过某些个点，那么这个尝试点（D）就不需要再碰这些点了！！！！！！！！就这个优化的结论。